# -*- coding: utf-8 -*-
"""NVDA_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DpncaiE50vtoz_uKKBFRUQXPAvbRtlT4
"""

import pandas as pd
import numpy as np
import yfinance as yf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from xgboost import XGBClassifier
import matplotlib.pyplot as plt

stock = 'NVDA'
data = yf.download(stock, start='2020-01-01', auto_adjust=False)[['Close']]
data=data.dropna()
data['return'] = data['Close'].pct_change()
data['volatility_10'] = data['return'].rolling(window=10).std()
data['sharpe_10'] = data['return'].rolling(window=10).mean() / data['volatility_10']
data['target'] = np.where(data['return'].shift(-1) > 0, 1, 0)
data = data.dropna()
data

data['sharpe_10'].plot()

X = data[['return', 'volatility_10', 'sharpe_10']]
y = data['target']

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, shuffle=False
)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

log_reg = LogisticRegression()
log_reg.fit(X_train_scaled, y_train)

rf = RandomForestClassifier(n_estimators=1000, max_depth=8, random_state=42)
rf.fit(X_train, y_train)

from xgboost import XGBClassifier

xgb = XGBClassifier(
    n_estimators=300,
    learning_rate=0.05,
    max_depth=4,
    subsample=0.8,
    colsample_bytree=0.8,
    random_state=42
)
xgb.fit(X_train, y_train)

y_pred_xgb = xgb.predict(X_test)
print("=== XgBoost Regression ===")
print(classification_report(y_test, y_pred_xgb, digits=3))


y_pred_lr = log_reg.predict(X_test_scaled)
y_pred_rf = rf.predict(X_test)



print("=== Logistic Regression ===")
print(classification_report(y_test, y_pred_lr, digits=3))
print(confusion_matrix(y_test, y_pred_lr))

print("\n=== Random Forest ===")
print(classification_report(y_test, y_pred_rf, digits=3))
print(confusion_matrix(y_test, y_pred_rf))

data_test = data.iloc[len(data) - len(y_test):].copy()
data_test['signal_lr'] = y_pred_lr
data_test['signal_rf'] = y_pred_rf
data_test['signal_xg'] = y_pred_xgb

data_test['strategy_lr'] = data_test['signal_lr'] * data_test['return']
data_test['strategy_rf'] = data_test['signal_rf'] * data_test['return']
data_test['strategy_xg'] = data_test['signal_xg'] * data_test['return']

cum_buyhold = (1 + data_test['return']).cumprod()
cum_lr = (1 + data_test['strategy_lr']).cumprod()
cum_rf = (1 + data_test['strategy_rf']).cumprod()
cum_xg = (1 + data_test['strategy_xg']).cumprod()

plt.figure(figsize=(10,6))
plt.plot(cum_buyhold, label='Buy & Hold', linewidth=2)
plt.plot(cum_lr, label='Logistic Regression Strategy', linestyle='--')
plt.plot(cum_rf, label='Random Forest Strategy', linestyle='-.')
plt.plot(cum_xg,label='XGBoost Strategy',linestyle=':')
plt.title('Model Strategy vs Buy & Hold (NVDA)')
plt.legend()
plt.show()